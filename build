#!/bin/sh
# -*- coding: utf-8; mode: sh; tab-width: 3 -*-
#--------------------------------------------------------------------------- #
# Tinytium																						  #
# Copyright 2012 Raffaello D. Di Napoli												  #
# -------------------------------------------------------------------------- #
# This file is part of Tinytium.															  #
#																									  #
# Tinytium is free software: you can redistribute it and/or modify it under  #
# the terms of the GNU General Public License as published by the Free		  #
# Software Foundation, either version 3 of the License, or (at your option)  #
# any later version.																			  #
#																									  #
# Tinytium is distributed in the hope that it will be useful, but WITHOUT	  #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or		  #
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for	  #
# more details.																				  #
#																									  #
# You should have received a copy of the GNU General Public License along	  #
# with Tinytium. If not, see <http://www.gnu.org/licenses/>.					  #
# -------------------------------------------------------------------------- #
# Image generation script for        _____ _              _   _				  #
# Tinytium.                         |_   _|_)____  _   __| |_(_)_   _ ____	  #
#                                     | | | |  _ \| | | |   _| | | | |    \  #
# It doesn't make assumptions on      | | | | | \ | \_/ || |_| | \_| | | | | #
# what/who invoked it; will use       |_| |_|_| |_|\__, |\___|_|\____|_|_|_| #
# ${PWD} as scratchpad directory.                  (___/							  #
# -------------------------------------------------------------------------- #

# Gathered from the various scripts in image and its subfolders.
bins_core_bb='
	awk
	chvt cttyhack
	deallocvt
	echo
	false fgconsole
	ifconfig
	kill klogd
	ln logger logread
	mkdir modprobe mount mv
	pidof
	rm route
	sed setsid sleep stat switch_root syslogd
	test true
	udhcpc umount
'
# Same as above, but not provided by BB (i.e. no config option for them), or
# not fully compatible in BB's implementation.
bins_core_nobb='
	dropbear dropbearconvert dropbearkey
	sh
	tput
	udevadm udevd
'
# Also gathered from the files mentioned above. Mostly features necessary to
# get BB applets to behave like expected; for programs excluded due to
# compatibility issues, see the comments in the files themselves (mainly
# /init).
busybox_config='
	ASH
	ASH_JOB_CONTROL
	-BASH_IS_ASH
	-BASH_IS_HUSH
	BASH_IS_NONE
	-BLKID
	FEATURE_EDITING_FANCY_PROMPT
	FEATURE_FANCY_ECHO
	FEATURE_FLOAT_SLEEP
	FEATURE_IFCONFIG_STATUS
	FEATURE_IPC_SYSLOG
	-FEATURE_LOGREAD_REDUCED_LOCKING
	FEATURE_MODPROBE_BLACKLIST
	FEATURE_MODUTILS_ALIAS
	FEATURE_MODUTILS_SYMBOLS
	-FEATURE_REMOTE_LOG
	-FEATURE_ROTATE_LOGFILE
	FEATURE_SH_EXTRA_QUIET
	FEATURE_SH_IS_ASH
	-FEATURE_SH_IS_HUSH
	-FEATURE_SH_IS_NONE
	FEATURE_SH_NOFORK
	FEATURE_STAT_FORMAT
	-FEATURE_SYSLOGD_DUP
	-GINIT
	-HUSH
	-INSTALL_APPLET_HARDLINKS
	-INSTALL_APPLET_DONT
	-INSTALL_APPLET_SCRIPT_WRAPPERS
	INSTALL_APPLET_SYMLINKS
	INSTALL_NO_USR
	-MKFS_EXT2
	-MKFS_REISER
	-MKFS_VFAT
	-MDEV
	-MODPROBE_SMALL
	-MOUNT
	SH_MATH_SUPPORT
	-SWITCH_ROOT
	-UMOUNT
'
# Useful programs to fix disks/filesystems.
bins_disk_extfs='
	badblocks
	chattr
	debugfs dumpe2fs
	e2freefrag e2fsck e2image e2label e2undo
	filefrag fsck.ext2 fsck.ext3 fsck.ext4 fsck.ext4dev
	logsave lsattr
	mke2fs mkfs.ext2 mkfs.ext3 mkfs.ext4 mkfs.ext4dev mklost+found
	resize2fs
	tune2fs
'
bins_disk="
	dd
	${bins_disk_extfs}
"
# Core commands + BusyBox + other useful stuff.
bins="
	${bins_core_bb}
	${bins_core_nobb}
	busybox
	nano
	${bins_disk}
"
# Basic storage-oriented udev rules.
udevrules='
	50-udev-default.rules
	60-cdrom_id.rules
	60-persistent-storage.rules
	64-btrfs.rules
	95-udev-late.rules
'


# Bulk-exports Portage environment variables into our actual environment,
# mostly to feed them back to Portage after we switch to our make.conf .
portage_export() {
	local vars
	vars=$(
		portageq envvar "${@}" |
		awk -v sVars="${*}" '
			{
				match(sVars, /^[^ ]*/)
				print "export " substr(sVars, 1, RLENGTH) "='\''" $0 "'\''"
				sVars = substr(sVars, RLENGTH + 2)
			}
		'
	)
	eval "${vars}"
}


# Don't assume that / is managed by Portage; / will be the "root environment".
# Also, don't assume we're being called by kernel-gen, so let's find out
# ${ROOT} indipendently.
portage_export ROOT CHOST
# This is the "parent (Portage) environment" from which the toolchain will be
# borrowed.
tym_parent="${ROOT}"
# Static files.
tym_src="${0%/*}"
# Directory we assume to be empty, and that we'll fill with an image of a
# complete initramfs.
tym_work="${PWD%/}/"
# Cache where we keep things that we don't want to regenerate on every
# invocation.
tym_cache="${tym_parent}var/cache/tinytium/${CHOST}/"
# Root of our Portage environment.
tym_root="${tym_cache}root/"



# Start of emerge phase. #####################################################



savedconfigs="${tym_parent}etc/portage/savedconfig/"


# (Re)build packages needed by Tinytium, each with the appropriate options.
ebegin 'Building/updating necessary packages'
if [ ! -d "${tym_root}" ]; then
	mkdir -p "${tym_root}"
	if [ ${ARCH} = x86_64 ]; then
		mkdir "${tym_root}lib"
		ln -s lib "${tym_root}lib64"
	fi
fi
cd "${tym_root}"

# Deploy the files in our root, using the parent's Portage configuration,
# while allowing for USE and EXTRA_ECONF customizations. See
# <http://www.gentoo.org/proj/en/base/embedded/handbook/>.
rooted_emerge_raw() {
	# The variable ARCH was really made for kmake, not portage. Temporarily fix it now.
	local lARCH=${ARCH}
	[ ${lARCH} = x86_64 ] && lARCH=amd64
	env ARCH=${lARCH} \
		ROOT="${tym_root}" \
		PORTAGE_CONFIGROOT="${tym_parent}" \
		FEATURES="-buildpkg -news nodoc noinfo noman ${lFEATURES}" \
		USE="${lUSE}" \
		EXTRA_ECONF="${lEXTRA_ECONF}" \
		"${CROSS_COMPILE}emerge" "${@}"
}

# Quiet version of rooted_emerge_raw.
rooted_emerge_raw_q() {
	rooted_emerge_raw -q --quiet-build "${@}" >/dev/null
#	rooted_emerge_raw -v "${@}"
}

# Re-emerges each specified package, if necessary. If a vabiable named
# refbinary_<packagename> exists, its value is a file (part of the package)
# whose last modification time is compared to that of an existing saved
# configuration file (saved by USE=savedconfig); in case the latter is newer,
# the package will be re-emerged. In case of packages using savedconfig, the
# configuration is temporarily adjusted for Tinytium's purposes.
rooted_emerge() {
	local pn ret
	for pkg; do
		pn=$(echo ${pkg#*/} | sed -e 's/-/_/g')

		# Extract package-specific emerge environment variables.
		for var in USE EXTRA_ECONF; do
			eval l${var}=\"\${${var}} \${${var}_${pn}}\"
		done
		lUSE="-* ipv6 minimal unicode ${lUSE}"

		local refbinary needs_emerge force_emerge lFEATURES=notitles

		# Check if this is a savedconfig ebuild, and enable USE=savedconfig if
		# appropriate.
		eval refbinary=\"\${refbinary_${pn}}\"
		[ -n ${refbinary} ] && lUSE="${lUSE} savedconfig"

		# Find out if the cached installed version needs to be updated.
		[ -n "$(rooted_emerge_raw -pquNO ${pkg})" ] &&
			needs_emerge=true || needs_emerge=false
		unset lFEATURES

		if [ -n "${refbinary}" ]; then
			local pkg_bestinst pkg_bestavail config_any="${savedconfigs}${pkg}"
			# Ensure that the category's savedconfig directory exists.
			mkdir -p "${config_any%/*}"
			# Find out which version is currently installed, if any.
			pkg_bestinst=$(portageq best_version "${tym_parent}" ${pkg})
			local config_bestinst="${savedconfigs}${pkg_bestinst}"
			# Find out which version would be installed.
			pkg_bestavail=$(portageq best_visible "${tym_parent}" ${pkg})
			local config_bestavail="${savedconfigs}${pkg_bestavail}"
			# Pick the newest saved configuration, and check if it's more recent
			# than the reference binary.
			force_emerge=true
			if [ -n "${pkg_bestavail}" -a -e "${config_bestavail}" ]; then
				[ ${refbinary} -nt "${config_bestavail}" ] && force_emerge=false
				adjconfig_${pn} "${config_bestavail}" >"${config_any}-tym"
			elif [ -n "${pkg_bestinst}" -a -e "${config_bestinst}" ]; then
				[ ${refbinary} -nt "${config_bestinst}" ] && force_emerge=false
				adjconfig_${pn} "${config_bestinst}" >"${config_any}-tym"
			elif [ -e "${config_any}" ]; then
				[ ${refbinary} -nt "${config_any}" ] && force_emerge=false
				adjconfig_${pn} "${config_any}" >"${config_any}-tym"
			else
				# There's no saved configuration, so assume that we last emerged
				# it and then deleted the temporary savedconfig, so we'll consider
				# it now up-to-date, as far as ${force_emerge} is concerned.
				force_emerge=false
				if ${needs_emerge}; then
					# Since there's no saved configuration available, but we do
					# need to emerge the package, emerge it once to create a
					# default saved configuration, with USE=-savedconfig.
					lUSE="${lUSE% savedconfig}"
					rooted_emerge_raw_q -uNO ${pkg}
					# Fix an issue in current savedconfig.eclass, where the saved
					# configuration is placed in ${ROOT}/${PORTAGE_CONFIGROOT}/etc/
					# instead of ${PORTAGE_CONFIGROOT}/etc/ .
					[ -e "${config_bestavail}" ] ||
						mv -f \
							"${tym_root}etc/portage/savedconfig/${pkg_bestavail}" \
							"${config_bestavail}"
					adjconfig_${pn} "${config_bestavail}" >"${config_any}-tym"
					rm -f "${config_bestavail}"
					# And now re-enable USE=savedconfig.
					lUSE="${lUSE} savedconfig"
				fi
			fi
			if ${needs_emerge} || ${force_emerge}; then
				# Rename the adjusted configuration so that emerge will use it,
				# but preserve a possibly existing same-name savedconfig.
				[ -f "${config_bestavail}" ] &&
					mv -f "${config_bestavail}" "${config_bestavail}-notym"
				mv "${config_any}-tym" "${config_bestavail}"
			fi
		else
			force_emerge=false
		fi

		if ${needs_emerge} || ${force_emerge}; then
			rooted_emerge_raw_q -uNO ${pkg}
			ret=${?}
		else
			ret=0
		fi

		if [ -n "${refbinary}" ]; then
			if ${needs_emerge} || ${force_emerge}; then
				# Delete the adjusted saved configuration, and restore the
				# previous file, if any.
				rm -f "${config_bestavail}"
				[ -f "${config_bestavail}-notym" ] &&
					mv -f "${config_bestavail}-notym" "${config_bestavail}"
			fi
			unset refbinary
		fi

		[ ${ret} -eq 0 ] || break
	done
	unset lUSE lEXTRA_ECONF
	return ${ret}
}


# Filters/enriches BusyBox's saved configuration file, ensuring that /init's
# dependencies are satisfied and avoiding any compatibility issues.
adjconfig_busybox() {
	awk -v sApplets="${bins_core_bb}" \
	    -v sConfig="${busybox_config}" \
	'
		BEGIN {
			# Assume that each applet has a corresponding CONFIG_ option. Also,
			# sConfig goes last, to override sApplets.
			sConfig = toupper(sApplets) " " sConfig
			sub(/^[[:space:]]+/, "", sConfig)
			sub(/[[:space:]]+$/, "", sConfig)
			split(sConfig, arrConfig, /[[:space:]]+/)
			for (i in arrConfig) {
				s = arrConfig[i]
				bDisable = sub(/^-/, "", s)
				# Assume bDisable == 0, for now.
				sFind = "# CONFIG_" s " is not set"
				sRepl = "CONFIG_" s "=y"
				if (bDisable) {
					# Swap sRepl and sFind.
					s = sFind
					sFind = sRepl
					sRepl = s
				}
				# Avoid contradictory replacement pairs.
				delete arrToggle[sRepl]
				arrToggle[sFind] = sRepl
			}
		}
		{
			# This will toggle every option that is not how we want it.
			if ($0 in arrToggle)
				print arrToggle[$0]
			else
				print
		}
	' <"${1}"
}
refbinary_busybox=bin/busybox
USE_busybox='make-symlinks'

# Filters/enriches Dropbear's saved configuration file, making it lighter and
# ensuring it suits our needs.
adjconfig_dropbear() {
	dropbear_config='
		-DO_HOST_LOOKUP
		DO_MOTD
		-ENABLE_SVR_PAM_AUTH
		-ENABLE_X11FWD
		-INETD_MODE
		-LOG_COMMANDS
		NON_INETD_MODE
		-SFTPSERVER_PATH
	'
	awk -v sConfig="${dropbear_config}" '
		BEGIN {
			sub(/^[[:space:]]+/, "", sConfig)
			sub(/[[:space:]]+$/, "", sConfig)
			split(sConfig, arrConfig, /[[:space:]]+/)
			for (i in arrConfig) {
				s = arrConfig[i]
				bDisable = sub(/^-/, "", s)
				if (!bDisable)
					print "#define " s
				arrDelete[s] = 1
			}
		}
		# If disabled, delete it; if enabled, it has been printed in BEGIN, so
		# delete any other occurrence.
		!($1 == "#define" && $2 in arrDelete) &&
		!($1 == "#" && $2 == "define" && $3 in arrDelete)
	' <"${1}"
}
refbinary_dropbear=usr/sbin/dropbeard
USE_dropbear='-minimal syslog zlib'
EXTRA_ECONF_dropbear='
	--disable-lastlog
	--disable-utmp
	--disable-utmpx
	--disable-wtmp
	--disable-wtmpx
	--disable-loginfunc
	--disable-pututline
	--disable-pututxline
'

USE_nano='-minimal ncurses'
EXTRA_ECONF_nano='
	--disable-extra
	--disable-browser
	--disable-mouse
	--disable-operatingdir
	--disable-tabcomp
	--disable-wrapping
'

EXTRA_ECONF_util_linux='
	--disable-uuidd
	--disable-agetty
	--disable-cramfs
	--disable-pivot_root
	--disable-unshare
	--disable-partx
	--disable-raw
	--disable-rdev
	--disable-rename
	--disable-schedutils
	--disable-write
'

EXTRA_ECONF_e2fsprogs='
	--enable-symlink-install
'

EXTRA_ECONF_ncurses='
	--with-terminfo-dirs=/lib/terminfo
'


#true ||
rooted_emerge \
	net-misc/dropbear \
	sys-apps/busybox \
	app-editors/nano \
	sys-apps/util-linux \
	sys-fs/e2fsprogs \
	sys-fs/udev \
	sys-libs/ncurses

eend ${?} || exit

# Remove useless absolute symlink that would later confuse the binary
# dependency resolver.
[ -L usr/bin/nano ] && rm usr/bin/nano



# End of emerge phase. #######################################################



which=$(which which)
cd "${tym_work}"
rooted_path="${tym_root}usr/bin:${tym_root}usr/sbin:${tym_root}bin:${tym_root}sbin"
rooted_libpath="${tym_root}usr/lib:${tym_root}lib:${tym_parent}usr/lib:${tym_parent}lib"


ebegin 'Creating directories'
[ ${ARCH} = x86_64 ] && ln -s lib lib64
mkdir -p bin dev etc/svc newroot proc sys run/svc
eend ${?} || exit


ebegin 'Adding source files'
cp -a "${tym_src}/image/"* .
eend ${?} || exit


ebegin 'Adding terminfo'
cp -a "${tym_root}etc/terminfo" lib/
eend ${?} || exit


ebegin 'Adding udev rules'
mkdir -p lib/udev/rules.d
(
	cd "${tym_root}lib/udev/rules.d/${f}"
	cp -a ${udevrules} "${tym_work}lib/udev/rules.d"
)
eend ${?} || exit


ebegin 'Determining binaries not built into BusyBox'
# Extract the names of any udev helpers required, and remove binaries built
# into BB.
bins=$(
	cd "${tym_root}lib/udev/rules.d"
	# List all the symlinks to BusyBox.
	find "${tym_root}" -lname busybox -printf '%f\n' |
	awk -v sBins="${bins}" '
		BEGIN {
			iArgBBApplets = ARGC - 1
			# Import currently selected binaries.
			sub(/^[[:space:]]+/, "", sBins)
			sub(/[[:space:]]+$/, "", sBins)
			split(sBins, arrBinNames, /[[:space:]]+/)
			for (i in arrBinNames)
				arrBins[arrBinNames[i]] = 1
		}
		ARGIND != iArgBBApplets &&
		sub(/^.*(RUN|IMPORT{program})\+?="/, "") {
			# Only take the command name.
			match($0, /^[^" ]*/)
			sBin = substr($0, 1, RLENGTH)
			# Exclude env var references.
			if (substr(sBin, 1, 5) == "$env{")
				next
			# Strip the path, and hope that BB uses the same absolute paths udev
			# expects.
			if (sub(/^.*\//, "", sBin))
				# 1 == name only.
				arrBins[sBin] = 1
			else
				# 2 == relative path.
				arrBins["lib/udev/" sBin] = 2
		}
		# Remove binaries included in BB.
		ARGIND == iArgBBApplets {
			# Omit this file from the output.
			delete arrBins[$0]
		}
		END {
			# Output a new binary list.
			for (sBin in arrBins)
				# Print type and name.
				print arrBins[sBin] " " sBin
		}
	' ${udevrules} - |
	while read -r type name; do
		if [ ${type} -eq 1 ]; then
			# 1 == name only: find out its full path.
			env PATH="${rooted_path}" ${which} ${name}
		elif [ ${type} -eq 2 ]; then
			# 2 == relative path: make it absolute.
			echo "${tym_root}${name}"
		fi
	done
)
eend ${?} || exit


ebegin 'Collecting shared object dependencies'
portage_export ELIBC
# Start with no collected dependencies.
deps=
# Initial set of files to scan for dependencies.
scandeps="${bins}"
while [ -n "${scandeps}" ]; do
	# Get a list of dependencies of (current level) dependencies, omitting any
	# libraries already accounted for.
	scandeps=$(
		"${CROSS_COMPILE}readelf" -dlW ${scandeps} |
		awk -v sDeps="${deps}" -v sLDPath="${rooted_libpath}" '
			function whichlib(sLib) {
				# Check the cache first.
				if (sLib in arrLibFullPaths)
					return arrLibFullPaths[sLib];
				sWhich = "for d in " sLDPath "; do" \
					 "	lib=\"${d}/" sLib "\";" \
					 "	[ -f \"${lib}\" ] && echo \"${lib}\" && break;" \
					 "done"
				sWhich | getline sFullPath
				close(sWhich)
				# Update the cache, and return the result.
				arrLibFullPaths[sLib] = sFullPath
				if (sFullPath)
					return sFullPath
				else
					return "/unable/to/find/" sLib
			}

			function addwithsoname(sDir, sLib) {
				# Add these backends, same version as glibc, and their SONAME
				# links, found out with objdump.
				print sDir sLib
				sObjDump = ENVIRON["CROSS_COMPILE"] "objdump -x " sDir sLib
				# Tiny awk sub-program here :)
				while ((sObjDump | getline) > 0)
					if ($1 == "SONAME" && NF >= 2)
						print sDir $2
				close(sObjDump)
			}

			BEGIN {
				# Convert this for whichlib().
				gsub(/:/, " ", sLDPath)
				# Import currently collected dependencies.
				sub(/^[[:space:]]+/, "", sDeps)
				sub(/[[:space:]]+$/, "", sDeps)
				split(sDeps, arrDepNames, /[[:space:]]+/)
				for (i in arrDepNames)
					arrDeps[arrDepNames[i]] = 1
			}
			{
				if (match( \
					$0, \
					/^[[:space:]]*\[Requesting program interpreter: / \
				)) {
					#      [Requesting program interpreter: /lib/ld-linux.so.2]
					s = substr($0, 1 + RLENGTH, length() - RLENGTH - 1)
					# Make it a relative path, so we can search for it with
					# whichlib().
					sub(/^.*\//, "", s)
				} else if ($2 == "(NEEDED)")
					# 0x00000001 (NEEDED) Shared library: [libc.so.6]
					s = substr($5, 2, length($5) - 2)
				else
					next
				s = whichlib(s)
				# If it is a new dependency, add it to the list.
				if (s in arrDeps)
					next
				arrScanDeps[s] = 1
				# Check if it is a symlink.
				sReadLink = "readlink -m \"" s "\""
				sReadLink | getline s
				close(sReadLink)
				# If s was a symlink, skip it if its target has been added
				# already; if it was not, this test will always be true.
				if (s in arrDeps)
					next
				arrScanDeps[s] = 1
			}
			END {
				bGlibc = (ENVIRON["ELIBC"] == "glibc")
				for (s in arrScanDeps) {
					print s
					# If adding glibc, also add nsswitch.
					if (bGlibc && match(s, /\/libc-[.0-9]+\.so$/)) {
						# Extract the matched version number, and leave the path.
						sVer = substr(s, RSTART + 6, RLENGTH - 6 - 3)
						sub(/[^\/]*$/, "", s)
						# Add these basic backends.
						addwithsoname(s, "libnss_compat-" sVer ".so")
						addwithsoname(s, "libnss_dns-" sVer ".so")
						addwithsoname(s, "libnss_files-" sVer ".so")
					}
				}
			}
		'
	)
	# Add the newly discovered dependencies to ${deps}.
	deps="${deps} ${scandeps}"
done
eend ${?} || exit


ebegin 'Adding binaries and their dependencies'
# Copy each file to ${tym_work}, keeping its relative path.
for src in ${bins} ${deps}; do
	if [ "${src#${tym_root}}" != "${src}" ]; then
		dst="${src#${tym_root}}"
	elif [ "${src#${tym_parent}}" != "${src}" ]; then
		dst="${src#${tym_parent}}"
	else
		eerror "Cannot find dependency '${src}'"
		eend 1 || exit
	fi
	# Don't bother keeping separate bin, sbin and lib in /usr.
	dst="${tym_work}${dst#usr/}"
	cp -a "${src}" "${dst}" || eend ${?} || exit
done
# Make links to the BusyBox applets.
(
	cd "${tym_root}"
	find -lname busybox -exec ln -s ../bin/busybox "${tym_work}{}" ";"
)
eend ${?} || exit


ebegin 'Generating /etc/ld.so.cache'
# TODO: what does this do on cross-compile, exactly? Does it really load
# foreign binaries?
ldconfig -r . 2>/dev/null
eend ${?} || exit


ebegin 'Creating/importing configuration files'

ln -s ../proc/mounts etc/mtab

echo 'root:x:0:0::/:/bin/sh' >etc/passwd
echo 'root:x:0:' >etc/group
# 'yrf:pass'
echo 'root:$1$2yMecUvM$n6o/OjTWuHzxQftOBpGg//:15006:0:99999:7:::' >etc/shadow
echo 'root:!::' >etc/gshadow
chmod 0600 etc/shadow etc/gshadow

if [ ${ELIBC} = glibc ]; then
	cat >etc/nsswitch.conf <<-EOF
		# Available backends are: compat, dns, files.

		passwd:		compat
		group:		compat
		shadow:		compat

		hosts:		dns files
		networks:	files
		ethers:		files
		protocols:	files
		rpc:		files
		services:	files
	EOF
fi

if [ -e "${tym_parent}etc/nanorc" ]; then
	cfgroot="${tym_parent}"
elif [ -e /etc/nanorc ]; then
	cfgroot=/
else
	unset cfgroot
fi
if [ -n "${cfgroot}" ]; then
	# Filter nanorc, deleting lines that require disabled functionality. See
	# the ${EXTRA_ECONF_nano} tweaks above.
	awk '
		BEGIN {
			# From USE=-justify
			arrUnavailOpts["brackets"] = 1
			arrUnavailKeys["justify"] = 1
			arrUnavailKeys["beginpara"] = 1
			arrUnavailKeys["endpara"] = 1
			arrUnavailKeys["fulljustify"] = 1
			# From USE=-spell
			arrUnavailOpts["speller"] = 1
			# From --disable-extra
			# <none>
			# From --disable-browser
			# <none>
			# From --disable-mouse
			arrUnavailOpts["mouse"] = 1
			# From --disable-operatingdir
			arrUnavailOpts["operatingdir"] = 1
			# From --disable-tabcomp
			# <none>
			# From --disable-wrapping
			arrUnavailOpts["brackets"] = 1
			arrUnavailOpts["nowrap"] = 1
		}
		# Skip includes and unavailable set options and key bindings.
		$1 != "include" &&
		($1 != "set" || !($2 in arrUnavailOpts)) &&
		($1 != "bind" || !($3 in arrUnavailKeys))
	' <"${cfgroot}etc/nanorc" >etc/nanorc
fi

eend ${?} || exit

