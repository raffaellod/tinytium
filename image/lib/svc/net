# -*- coding: utf-8; mode: sh; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2012, 2014
# Raffaello D. Di Napoli
#
# This file is part of Tinytium.
#
# Tinytium is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# Tinytium is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# Tinytium. If not, see <http://www.gnu.org/licenses/>.
#-------------------------------------------------------------------------------

# Service script to initialize/uninitialize the network. It obtains its
# configuration from the kernel command line.


SVC_DESC='Manages the network connections listed in /etc/svc/net'
SVC_NEEDS='syslogd'


# Enums every non-loopback interface.
ifenum() {
   sed -ne '/^[\t ]*lo:/ ! s/:.*$//p' </proc/net/dev
}


# Determines a configured address type, distinguishing among "dhcp", ip/netmask,
# possibly others.
addrtype() {
   echo "${1}" |
   sed -re '
      s|^dhcp$|dhcp|
      t
      s|^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$|ip|
      t
      s|^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}$|ip/nm|
      t
      c error
   '
}


# Calculates a netmask from a CIDR address.
cidr2netmask() {
   local bits=${1} nm= octect
   for octect in 1 2 3 4; do
      if [ ${bits} -ge 8 ]; then
         nm=${nm}.255
         bits=$((${bits} - 8))
      elif [ ${bits} -gt 0 ]; then
         nm=${nm}.$((256 - ( 1 << ( 8 - ${bits} ) ) ))
         bits=0
      else
         nm=${nm}.0
      fi
   done
   echo ${nm#.}
}




svc_initconfig() {
   # See /init for the format of the tym:net.* kernel parameter.
   sed -e 's/ /\n/g' </proc/cmdline |
   awk -F, -v sQ=\' '
      /^tym:net\./ {
         sSrcLine = $0
         sub(/^tym:net\./, "")
         if (!match($0, /^[0-9A-Za-z]+=/))
            next
         sItf = substr($0, 1, RLENGTH - 1)
         $0 = substr($0, RLENGTH + 1)
         print "# Generated from " sSrcLine
         print sItf "=" sQ $1 sQ
      }
   ' >${1}
}


svc_start() {
   local conf_itf oneup=false
   ifconfig lo 127.0.0.1 netmask 255.0.0.0
   for itf in $(ifenum); do
      eval conf_itf=\"\${${itf}}\"
      case $(addrtype "${conf_itf}") in
      (dhcp)
         linfo "${itf}: starting udhcpc"
         if udhcpc -RS -A 5 -i ${itf} \
            -p /run/udhcpc-${itf}.pid \
            -s /lib/svc-scripts/udhcpc-event
         then
            oneup=true
         fi
         ;;
      (ip/nm)
         linfo "${itf}: configuring static address ${conf_itf}"
         if ifconfig ${itf} ${conf_itf%/*} \
            netmask $(cidr2netmask ${conf_itf#*/})
         then
            oneup=true
         else
            lerror "${itf}: unable to assign address"
         fi
         ;;
      esac
   done
   ${oneup} ||
      ldie 'no interface configuration found'
}


svc_stop() {
   local conf_itf=
   for itf in $(ifenum); do
      eval conf_itf=\"\${${itf}}\"
      if [ -e /run/udhcpc-${itf}.pid ]; then
         linfo "${itf}: stopping udhcpc"
         waitkill 30 -f /run/udhcpc-${itf}.pid
      fi
      if ifconfig ${itf} | grep -q '^[[:space:]]\+UP\>'; then
         linfo "${itf}: deconfiguring"
         ifconfig ${itf} down 0.0.0.0 ||
            lerror "${itf}: unable to deconfigure"
      fi
   done
   ifconfig lo down
}
