#!/bin/sh
# -*- coding: utf-8; mode: sh; tab-width: 3; indent-tabs-mode: nil -*-
#
# Copyright 2012-2014, 2017-2018
# Raffaello D. Di Napoli
#
# This file is part of Tinytium.
#
# Tinytium is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# Tinytium is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# Tinytium. If not, see <http://www.gnu.org/licenses/>.
#-----------------------------------------------------------------------------

# The init program (PID 1).


# Supported kernel arguments (* denotes default):
#   noresume
#   quiet
#   resume=...
#   ro*
#   root=...
#   rootflags=...
#   rootfstype=...
#   rw
#   tym:break={cmdline,devs-coldplug,devs-modprobe,devs-wait,resume,mount,
#              pre-init,init},...
#   tym:errors={panic*,shell,ssh}
#   tym:logvt=[n]
#   tym:net.eth0=dhcp
#   tym:net.eth1=192.168.1.10/24,gw=192.168.1.1

# Poor man's sed s///g.
strsubst() {
   eval local s=\${${1}}
   while [ "${s##*${2}}" != "${s}" ]; do
      s="${s%${2}*}${3}${s##*${2}}"
   done
   eval ${1}=\${s}
}

info() {
   # 6 = KERN_INFO
   echo "<6>init[${$}]: ${1}" >/dev/kmsg
}

warn() {
   # 4 = KERN_WARNING
   echo "<4>init[${$}]: warning: ${1}" >/dev/kmsg
}

error() {
   # 1 = KERN_ALERT
   echo "<1>init[${$}]: error: ${1}" >/dev/kmsg
   shift
   shell "${@}"
}

panic() {
   # 0 = KERN_EMERG
   {
      echo "<0>init[${$}]: FATAL: ${1}"
      echo "<0>init[${$}]: FATAL: boot aborted; panicking"
   } >/dev/kmsg
   # init exiting will trigger a kernel panic, which is probably the best
   # thing to do at this point: at least, if panic= was specified, the kernel
   # will reboot.
   exit
}

shell() {
   . /lib/init/shell "${@}"
}

shellonbreak() {
   if [ "${tym_break#${1},}" != "${tym_break}" ]; then
      tym_break="${tym_break#${1},}"
   elif [ "${tym_break}" = ${1} ]; then
      tym_break=
   else
      return
   fi
   shell "Breaking due to \`tym:break=${1}'."
}

# Basic initial setup.

mount_devtmpfs() {
   if fstabinfo --quiet /dev; then
      mount -n /dev
   else
      mount -n -t tmpfs -o "exec,nosuid,mode=0755,size=8M" mdev /dev

      # creating /dev/console and /dev/tty1 to be able to write to $CONSOLE
      # with/without bootsplash before mdev creates it
      [ -c /dev/console ] || mknod /dev/console c 5 1
      [ -c /dev/tty1 ] || mknod /dev/tty1 c 4 1

      # udevd will dup its stdin/stdout/stderr to /dev/null and we do not want
      # a file which gets buffered in ram
      [ -c /dev/null ] || mknod /dev/null c 1 3

      # copy over any persistant things
      if [ -d /lib/mdev/devices ]; then
         cp -RPp /lib/mdev/devices/* /dev 2>/dev/null
      fi

      # Not provided by sysfs but needed
      ln -snf /proc/self/fd /dev/fd
      ln -snf fd/0 /dev/stdin
      ln -snf fd/1 /dev/stdout
      ln -snf fd/2 /dev/stderr
      [ -e /proc/kcore ] && ln -snf /proc/kcore /dev/core

      # Create problematic directories
      mkdir -p /dev/pts /dev/shm
   fi
}

export PATH=/bin:/sbin
mount -n -t proc /proc /proc
mount -n -t sysfs /sys /sys
mount -n -t devtmpfs -o mode=0755,size=4M devtmpfs /dev
mkdir /dev/pts
mount -n -t devpts -o gid=5,mode=620 devpts /dev/pts
mkdir /dev/disk /dev/disk/by-label /dev/disk/by-uuid

# Kernel command line processing functions.
cmdline_has_flag() {
   [ "${cmdline#* ${1} }" != "${cmdline}" ]
}
cmdline_arg_value() {
   local tail="${cmdline#* ${1}=}"
   if [ "${tail}" != "${cmdline}" ]; then
      eval ${2:-${1}}=\${tail%% *}
      return 0
   else
      unset ${1}
      return 1
   fi
}
read -r cmdline </proc/cmdline
cmdline=" ${cmdline} "
cmdline_has_flag quiet && quiet=true || quiet=false
info 'loaded, starting boot sequence'

# Analyze a few basic options.
cmdline_arg_value 'tym:break' tym_break
cmdline_arg_value 'tym:errors' tym_errors || tym_errors=panic
case "${tym_errors}" in
(panic|shell|ssh)
   ;;
(*)
   warn "invalid tym:errors value \`${tym_errors}', defaulting to \`panic'"
   tym_errors=panic
   ;;
esac
shellonbreak cmdline

# Find out the root filesystem.
cmdline_arg_value root || panic 'no root argument provided'
case "${root}" in
(LABEL=?*)
   strsubst root '/' '\x2f'
   root=/dev/disk/by-label/${root#LABEL=}
   ;;
(UUID=?*)
   root=/dev/disk/by-uuid/${root#UUID=}
   ;;
(/dev/?*)
   ;;
(*)
   panic "don't know how to handle \`root=${root}'"
   ;;
esac
# Create the /dev/resume symlink, and remember to wait for it.
ln -s "${root#/dev/}" /dev/root
devs_waiting_for_root=true

# Determine whether to resume the system from hibernation.
devs_waiting_for_resume=false
unset resume
if ! cmdline_has_flag noresume && cmdline_arg_value resume; then
   case "${resume}" in
   (LABEL=?*)
      strsubst resume '/' '\x2f'
      resume=/dev/disk/by-label/${resume#LABEL=}
      ;;
   (UUID=?*)
      resume=/dev/disk/by-uuid/${resume#UUID=}
      ;;
   (/dev/?*)
      ;;
   (*)
      panic "don't know how to handle \`resume=${resume}'"
      ;;
   esac
   # Create the /dev/resume symlink, and remember to wait for it.
   ln -s ${resume#/dev/} /dev/resume
   devs_waiting_for_resume=true
fi

# Enumerate module aliases for the devices in the system.
# TODO: parallelism, maybe merge with code below using the output.
find /sys -name modalias -exec cat \{\} + |
awk '
   {
      # This merges duplicate lines on top of each other.
      aliases[$0] = 1
   }
   END {
      for (alias in aliases) {
         print alias
      }
   }
' >/modaliases.lst

# Populate /dev with existing devices from /sys
shellonbreak devs-coldplug
mdev -s

shellonbreak devs-modprobe
# Setup the kernel hotplug handler.
[ -e /proc/sys/kernel/hotplug ] && echo /sbin/mdev >/proc/sys/kernel/hotplug
# Load the modules for every device.
while read -r modalias; do
   # Ignore errors due to missing/excluded/blacklisted (TODO) modules.
   # TODO: parallelism.
   modprobe ${modalias} 2>/dev/null
done </modaliases.lst

# Wait for devices to come online.

# Uses blkid to detect the type of filesystem in ${1}; returns 0 if
# successful, or 1 otherwise.
detect_fs_type() {
   # Get info on the device block.
   local LABEL= UUID= TYPE= devattrs="$(blkid ${1})"
   if [ ${?} -eq 0 -a -n "${devattrs}" ]; then
      # Strip off the device name, leaving the attributes, which are then
      # evaluated as environment variable assignments.
      eval ${devattrs#*:}
      echo "${TYPE}"
   fi
   [ -n "${TYPE}" ]
}

# Generates the initial root mount options.
cmdline_get_root_mount_opts() {
   cmdline_has_flag rw && baserootflags=rw || baserootflags=ro
   cmdline_arg_value rootflags
   allrootflags=${baserootflags}${rootflags:+,${rootflags}}

   cmdline_arg_value rootfstype ||
   rootfstype="$(detect_fs_type ${root})" ||
   rootfstype=auto
}

# Extract the target (recursively resolved) of the /dev/root link into the
# ${root} variable.
get_root_from_symlink() {
   [ -L /dev/root ] && root="$(readlink -f /dev/root)"
}

# Extract the target (recursively resolved) of the /dev/resume link into the
# ${resume} variable.
get_resume_from_symlink() {
   [ -L /dev/resume ] && resume="$(readlink -f /dev/resume)"
}

# Checks whether the wait for devices is over.
devs_wait_is_over() {
   # If a device we were wating for becomes available, stop waiting for it.
   if ${devs_waiting_for_root} && [ -e /dev/root ]; then
      devs_waiting_for_root=false
   fi
   if ${devs_waiting_for_resume} && [ -e /dev/resume ]; then
      devs_waiting_for_resume=false
   fi
   # Report whether all waits are over.
   ! ${devs_waiting_for_root} && ! ${devs_waiting_for_resume}
}

shellonbreak devs-wait
i=0
while :; do
   # Check for really quick devices.
   devs_wait_is_over && break

   # One or more devices is not online yet. Let's repeat this for an
   # additional 10s before calling for user intervention.
   sleep 0.25
   # In messages, give priority to root.
   if ${devs_waiting_for_root}; then
      link=/dev/root
      desc='root'
   elif ${devs_waiting_for_resume}; then
      link=/dev/resume
      desc='hibernation image'
   fi
   dev=$(readlink ${link})
   i=$((i + 1))
   if [ ${i} -eq 40 ]; then
      # Number of attempts exceeded.
      error "cannot find the ${desc} device" \
         'You can either wait a little longer, if you are sure that' \
         "  ${dev}" \
         "is the correct ${desc} device and will eventually come online, "\
            'or you can' \
         "create a symlink from ${link} to the correct device."
      # Now that we're back, resume from the beginning of the loop.
      i=0
   elif [ $((i % 12)) -eq 0 ]; then
      # Print something every now and then (3s).
      info "waiting for ${dev} ..."
   fi
done

# Try to resume the system.
shellonbreak resume
get_resume_from_symlink
if [ -n "${resume}" ]; then
   info "resuming system from hibernation image in ${resume}"
   signature=$(swap_signature "${resume}")
   case "${signature}" in
   (S[1-2]SUSPEND)
      # Kernel suspend, use sysfs.
      resume=$(stat -Lc'%t %T' "${resume}")
      echo "$((0x${resume% *})):$((0x${resume#* }))" >/sys/power/resume
      ;;
   (ULSUSPEND)
      # TODO: does this work? Need to test swsusp.
      /sbin/resume -r "${resume}"
      ;;
   esac
fi

# Try to mount the root filesystem.
shellonbreak mount
get_root_from_symlink
cmdline_get_root_mount_opts
info "mounting ${root} (type: ${rootfstype}, options: ${allrootflags})"
if ! mount -n -t ${rootfstype} -o "${allrootflags}" "${root}" /newroot; then
   error "unable to mount ${root} as root" \
      'You have to mount /newroot manually.'
   # Check which device was mounted by the user as /newroot, so we can remount
   # it later.
   root=
   while read -r dev mp rest; do
      if [ ${mp} = /newroot ]; then
         root=${dev}
         # Also make sure it's symlinked by /dev/root.
         [ /dev/root -ef "${root}" ] || ln -fs "${root#/dev/}" /dev/root
         break
      fi
   done </proc/mounts
   # If ${root} is still non-existent, there's no point in going ahead.
   [ -e "${root}" ] || panic 'no root mounted in /newroot'
fi

# If no root mount options were specified and /newroot/etc/fstab contains
# special mount options for it, remount the root with the options in fstab.
if [ -z "${rootflags}" -a -f /newroot/etc/fstab ]; then
   # Remounts / with the options in /etc/fstab contained in it.
   remount_root_per_fstab() {
      local dev mp rootfstype opts rest
      while read -r dev mp rootfstype opts rest; do
         # Skip comments, and only consider /.
         if [ "${dev%%#*}" = "${dev}" -a "${mp}" = / ]; then
            # Add leading and trailing commas for later.
            rootflags=,${opts},
            break
         fi
      done </newroot/etc/fstab
      # Strip ro, rw and defaults.
      strsubst rootflags ',r[ow],' ','
      strsubst rootflags ',defaults,' ','
      # Remove the added leading and trailing commas.
      rootflags=${rootflags#,}
      rootflags=${rootflags%,}
      # If there are still any options left, use them.
      if [ -n "${rootflags}" ]; then
         allrootflags=${baserootflags},${rootflags}
         info "remounting ${root} (type: ${rootfstype}, options: "\
            "${allrootflags})"
         umount /newroot
         mount -n -t ${rootfstype} -o "${allrootflags}" "${root}" /newroot ||
            error "unable to remount ${root} as root" \
               'You will have to remount it manually.'
      fi
   }

   remount_root_per_fstab
fi

# Check for init.
shellonbreak pre-init
cmdline_arg_value init || init=/sbin/init
[ -n "${init}" ] ||
   panic "argument \`init=' must specify a valid executable"
if ! [ -f /newroot${init} -a -x /newroot${init} ]; then
   error "cannot find ${init} to run as init - wrong root filesystem?" \
      "Please mount the correct root filesystem where ${init} can be found."
fi

# Determines if the kernel supports SELinux.
is_selinux_supported() {
   local flags fstype
   while read -r flags fstype; do
      if [ "${fstype}" = selinuxfs ]; then
         return 0
      fi
   done </proc/filesystems
   return 1
}

if is_selinux_supported; then
   : # TODO: load SELinux policy.
fi

# Terminates any mdev-related activity.
mdev_quit() {
   # Remove the kernel hotplug handler.
   [ -e /proc/sys/kernel/hotplug ] && echo >/proc/sys/kernel/hotplug
   # Wait until all mdev processes have quit.
   local pids
   while pids=$(pidof mdev); do
      kill -TERM ${pids} 2>/dev/null
      sleep 0.1
   done
}

mdev_quit

shellonbreak init

# Generates the command line for /sbin/init by filtering the one for the
# kernel.
get_init_args() {
   local arg
   for arg; do
      case "${arg}" in
      # Only allow a few well-known arguments.
      ([0-9Ss]|auto|emergency|single)
         echo "${arg}"
         ;;
      esac
   done
}

info 'switching root'
mount -o move /sys /newroot/sys &&
mount -o move /proc /newroot/proc &&
mount -o move /dev /newroot/dev &&
exec switch_root /newroot ${init} $(get_init_args ${cmdline})
# Fall through...
error 'unable to switch to the requested root'
